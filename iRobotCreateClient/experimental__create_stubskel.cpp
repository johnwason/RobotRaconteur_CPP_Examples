//This file is automatically generated. DO NOT EDIT!

#ifndef ROBOTRACONTEUR_USE_STDAFX
#include "experimental__create_stubskel.h"
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
#else
#include "stdafx.h"
#endif
namespace experimental
{
namespace create
{
std::string experimental__createFactory::GetServiceName()
{
return "experimental.create";
}
std::string experimental__createFactory::DefString()
{
std::string out(
"\n"
"#Service to provide sample interface to the iRobot Create\n"
"service experimental.create\n"
"\n"
"option version 0.5\n"
"\n"
"struct SensorPacket\n"
"field uint8 ID\n"
"field uint8[] Data\n"
"end struct\n"
"\n"
"object Create\n"
"option constant int16 DRIVE_STRAIGHT 32767\n"
"option constant int16 SPIN_CLOCKWISE -1\n"
"option constant int16 SPIN_COUNTERCLOCKWISE 1\n"
"\n"
"\n"
"function void Drive(int16 velocity, int16 radius)\n"
"\n"
"function void StartStreaming()\n"
"function void StopStreaming()\n"
"\n"
"property int32 DistanceTraveled\n"
"property int32 AngleTraveled\n"
"property uint8 Bumpers\n"
"\n"
"event Bump()\n"
"\n"
"wire SensorPacket packets\n"
"\n"
"callback uint8[] play_callback(int32 DistanceTraveled, int32 AngleTraveled)\n"
"\n"
"end object\n"
);
return out;
}
RR_SHARED_PTR<RobotRaconteur::StructureStub> experimental__createFactory::FindStructureStub(std::string s)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(s);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (objecttype=="SensorPacket") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<SensorPacket_stub>(GetNode()));
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> experimental__createFactory::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRStructure> structin)
{
std::string type=structin->RRType();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "experimental.create") return GetNode()->PackStructure(structin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->PackStructure(structin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::RRObject> experimental__createFactory::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> mstructin)
{
std::string type=mstructin->GetTypeString();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "experimental.create") return GetNode()->UnpackStructure(mstructin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->UnpackStructure(mstructin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceStub> experimental__createFactory::CreateStub(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::ClientContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "experimental.create") return GetNode()->GetServiceType(servicetype)->CreateStub(type,path,context);
if (objecttype=="Create") { RR_SHARED_PTR<Create_stub> o=(RR_MAKE_SHARED<Create_stub>(path,context)); o->RRInitStub(); return o; }
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceSkel> experimental__createFactory::CreateSkel(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::RRObject> obj, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "experimental.create") return GetNode()->GetServiceType(servicetype)->CreateSkel(type,path,obj,context);
if (objecttype=="Create") {RR_SHARED_PTR<Create_skel> o=RR_MAKE_SHARED<Create_skel>(); o->Init(path,obj,context); return o; }
throw RobotRaconteur::ServiceException("Invalid structure skel type.");
return RR_SHARED_PTR<RobotRaconteur::ServiceSkel>();
}
void experimental__createFactory::DownCastAndThrowException(RobotRaconteur::RobotRaconteurException& rr_exp)
{
std::string rr_type=rr_exp.Error;
if (rr_type.find('.')==std::string::npos)
{
	return;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "experimental.create") GetNode()->DownCastAndThrowException(rr_exp);
return;
}
RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> experimental__createFactory::DownCastException(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> rr_exp){
if (!rr_exp) return rr_exp;
std::string rr_type=rr_exp->Error;
if (rr_type.find('.')==std::string::npos)
{
	return rr_exp;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "experimental.create") return GetNode()->DownCastException(rr_exp);
return rr_exp;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> SensorPacket_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<SensorPacket > s2=RobotRaconteur::rr_cast<SensorPacket >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("ID",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(s2->ID))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("Data",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->Data)));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("experimental.create.SensorPacket",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> SensorPacket_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<SensorPacket > ret=RR_MAKE_SHARED<SensorPacket >();
ret->ID=RobotRaconteur::RRArrayToScalar<uint8_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"ID")->CastData<RobotRaconteur::RRArray<uint8_t > >());
ret->Data=RobotRaconteur::MessageElement::FindElement(m->Elements,"Data")->CastData<RobotRaconteur::RRArray<uint8_t > >();
return ret;
}

Create_stub::Create_stub(const std::string &path, RR_SHARED_PTR<RobotRaconteur::ClientContext> c) : RobotRaconteur::ServiceStub(path,c){ }
void Create_stub::RRInitStub()
{
rrvar_play_callback=RR_MAKE_SHARED<RobotRaconteur::CallbackClient<boost::function<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >(int32_t, int32_t) > > >("play_callback") ;
rrvar_packets=RR_MAKE_SHARED<RobotRaconteur::WireClient<RR_SHARED_PTR<SensorPacket > > >("packets",shared_from_this()) ;
}

int32_t Create_stub::get_DistanceTraveled()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"DistanceTraveled");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::RRArrayToScalar<int32_t >(me->CastData<RobotRaconteur::RRArray<int32_t > >());
}
void Create_stub::set_DistanceTraveled(int32_t value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"DistanceTraveled");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(req);
}

int32_t Create_stub::get_AngleTraveled()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"AngleTraveled");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::RRArrayToScalar<int32_t >(me->CastData<RobotRaconteur::RRArray<int32_t > >());
}
void Create_stub::set_AngleTraveled(int32_t value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"AngleTraveled");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(req);
}

uint8_t Create_stub::get_Bumpers()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"Bumpers");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::RRArrayToScalar<uint8_t >(me->CastData<RobotRaconteur::RRArray<uint8_t > >());
}
void Create_stub::set_Bumpers(uint8_t value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"Bumpers");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(value))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(req);
}

void Create_stub::Drive(int16_t velocity, int16_t radius)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"Drive");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("velocity",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int16_t >(velocity))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("radius",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int16_t >(radius))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void Create_stub::StartStreaming()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"StartStreaming");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void Create_stub::StopStreaming()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"StopStreaming");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

boost::signals2::signal<void ()>& Create_stub::get_Bump()
{
return rrvar_Bump;
}

RR_SHARED_PTR<RobotRaconteur::Callback<boost::function<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >(int32_t, int32_t) > > > Create_stub::get_play_callback()
{
RR_SHARED_PTR<RobotRaconteur::CallbackClient<boost::function<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >(int32_t, int32_t) > > > value=rrvar_play_callback;
if (!value) throw std::runtime_error("Stub has been closed");
return value;
}
void Create_stub::set_play_callback(RR_SHARED_PTR<RobotRaconteur::Callback<boost::function<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >(int32_t, int32_t)> > > value)
{
throw std::runtime_error("Not valid for client");
}
RR_SHARED_PTR<RobotRaconteur::Wire<RR_SHARED_PTR<SensorPacket > > > Create_stub::get_packets()
{
RR_SHARED_PTR<RobotRaconteur::WireClient<RR_SHARED_PTR<SensorPacket > > > value=rrvar_packets;
if (!value) throw std::runtime_error("Stub has been closed");
return value;
}
void Create_stub::set_packets(RR_SHARED_PTR<RobotRaconteur::Wire<RR_SHARED_PTR<SensorPacket > > > value)
{
throw std::runtime_error("Not valid for client");
}

void Create_stub::DispatchEvent(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
if (rr_m->MemberName=="Bump")
{
get_Bump()();
return;
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void Create_stub::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void Create_stub::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
if (m->MemberName=="packets")
{
rrvar_packets->WirePacketReceived(m);
return;
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry>Create_stub::CallbackCall(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
std::string ename=rr_m->MemberName;
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_CallbackCallRet, ename);
rr_mr->ServicePath=rr_m->ServicePath;
rr_mr->TransactionID=rr_m->TransactionID;
if (rr_m->MemberName=="play_callback")
{
int32_t DistanceTraveled=RobotRaconteur::RRArrayToScalar<int32_t >(rr_m->FindElement("DistanceTraveled")->CastData<RobotRaconteur::RRArray<int32_t > >());
int32_t AngleTraveled=RobotRaconteur::RRArrayToScalar<int32_t >(rr_m->FindElement("AngleTraveled")->CastData<RobotRaconteur::RRArray<int32_t > >());
RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > rr_ret=rrvar_play_callback->GetFunction()(DistanceTraveled, AngleTraveled);
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(rr_ret)));
return rr_mr;
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

std::string Create_stub::RRType()
{
return "experimental.create.Create";
}
void Create_stub::RRClose()
{
rrvar_packets->Shutdown();
rrvar_Bump.disconnect_all_slots();
if (rrvar_play_callback)
{
rrvar_play_callback->Shutdown();
}
ServiceStub::RRClose();
}

void Create_stub::async_get_DistanceTraveled(boost::function<void (int32_t,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"DistanceTraveled");
AsyncProcessTransaction(m,boost::bind(&Create_stub::rrend_get_DistanceTraveled, RobotRaconteur::rr_cast<Create_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Create_stub::rrend_get_DistanceTraveled(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (int32_t ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
int32_t rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::RRArrayToScalar<int32_t >(me->CastData<RobotRaconteur::RRArray<int32_t > >());
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(0,RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Create_stub::async_set_DistanceTraveled(int32_t value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"DistanceTraveled");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value))));
AsyncProcessTransaction(req,boost::bind(&Create_stub::rrend_set_DistanceTraveled, RobotRaconteur::rr_cast<Create_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Create_stub::rrend_set_DistanceTraveled(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Create_stub::async_get_AngleTraveled(boost::function<void (int32_t,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"AngleTraveled");
AsyncProcessTransaction(m,boost::bind(&Create_stub::rrend_get_AngleTraveled, RobotRaconteur::rr_cast<Create_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Create_stub::rrend_get_AngleTraveled(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (int32_t ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
int32_t rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::RRArrayToScalar<int32_t >(me->CastData<RobotRaconteur::RRArray<int32_t > >());
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(0,RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Create_stub::async_set_AngleTraveled(int32_t value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"AngleTraveled");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value))));
AsyncProcessTransaction(req,boost::bind(&Create_stub::rrend_set_AngleTraveled, RobotRaconteur::rr_cast<Create_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Create_stub::rrend_set_AngleTraveled(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Create_stub::async_get_Bumpers(boost::function<void (uint8_t,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"Bumpers");
AsyncProcessTransaction(m,boost::bind(&Create_stub::rrend_get_Bumpers, RobotRaconteur::rr_cast<Create_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Create_stub::rrend_get_Bumpers(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (uint8_t ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
uint8_t rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::RRArrayToScalar<uint8_t >(me->CastData<RobotRaconteur::RRArray<uint8_t > >());
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(0,RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Create_stub::async_set_Bumpers(uint8_t value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"Bumpers");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(value))));
AsyncProcessTransaction(req,boost::bind(&Create_stub::rrend_set_Bumpers, RobotRaconteur::rr_cast<Create_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Create_stub::rrend_set_Bumpers(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Create_stub::async_Drive(int16_t velocity, int16_t radius,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"Drive");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("velocity",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int16_t >(velocity))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("radius",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int16_t >(radius))));
AsyncProcessTransaction(rr_req,boost::bind(&Create_stub::rrend_Drive, RobotRaconteur::rr_cast<Create_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Create_stub::rrend_Drive(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Create_stub::async_StartStreaming(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"StartStreaming");
AsyncProcessTransaction(rr_req,boost::bind(&Create_stub::rrend_StartStreaming, RobotRaconteur::rr_cast<Create_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Create_stub::rrend_StartStreaming(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Create_stub::async_StopStreaming(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"StopStreaming");
AsyncProcessTransaction(rr_req,boost::bind(&Create_stub::rrend_StopStreaming, RobotRaconteur::rr_cast<Create_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Create_stub::rrend_StopStreaming(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}

void Create_skel::Init(const std::string& path, RR_SHARED_PTR<RobotRaconteur::RRObject> object, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
uncastobj=object;
rr_InitPipeServersRun=false;
rr_InitWireServersRun=false;
ServiceSkel::Init(path,object,context);
}
RR_SHARED_PTR<experimental::create::Create > Create_skel::get_obj()
{
return RobotRaconteur::rr_cast<experimental::create::Create >(uncastobj);
}
RR_SHARED_PTR<experimental::create::async_Create > Create_skel::get_asyncobj()
{
return RR_DYNAMIC_POINTER_CAST<experimental::create::async_Create >(uncastobj);
}
void Create_skel::ReleaseCastObject() 
{
rr_packets_wire->Shutdown();
get_obj()->get_play_callback()->Shutdown();
}
std::string Create_skel::GetObjectType()
{
return "experimental.create.Create";
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> Create_skel::CallGetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetRes,m->MemberName);
RR_SHARED_PTR<experimental::create::async_Create > async_obj=get_asyncobj();
if (m->MemberName == "DistanceTraveled")
{
if (async_obj)
{
RR_WEAK_PTR<experimental::create::Create_skel> wp=RobotRaconteur::rr_cast<experimental::create::Create_skel>(shared_from_this());
async_obj->async_get_DistanceTraveled(boost::bind(&experimental::create::Create_skel::rr_get_DistanceTraveled,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
int32_t value=get_obj()->get_DistanceTraveled();
mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value))));
return mr;
}
}
if (m->MemberName == "AngleTraveled")
{
if (async_obj)
{
RR_WEAK_PTR<experimental::create::Create_skel> wp=RobotRaconteur::rr_cast<experimental::create::Create_skel>(shared_from_this());
async_obj->async_get_AngleTraveled(boost::bind(&experimental::create::Create_skel::rr_get_AngleTraveled,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
int32_t value=get_obj()->get_AngleTraveled();
mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value))));
return mr;
}
}
if (m->MemberName == "Bumpers")
{
if (async_obj)
{
RR_WEAK_PTR<experimental::create::Create_skel> wp=RobotRaconteur::rr_cast<experimental::create::Create_skel>(shared_from_this());
async_obj->async_get_Bumpers(boost::bind(&experimental::create::Create_skel::rr_get_Bumpers,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
uint8_t value=get_obj()->get_Bumpers();
mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(value))));
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> Create_skel::CallSetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetRes,m->MemberName);
RR_SHARED_PTR<experimental::create::async_Create > async_obj=get_asyncobj();
if (m->MemberName == "DistanceTraveled")
{
int32_t value=RobotRaconteur::RRArrayToScalar<int32_t >(m->FindElement("value")->CastData<RobotRaconteur::RRArray<int32_t > >());
if (async_obj)
{
RR_WEAK_PTR<experimental::create::Create_skel> wp=RobotRaconteur::rr_cast<experimental::create::Create_skel>(shared_from_this());
async_obj->async_set_DistanceTraveled(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_DistanceTraveled(value);
return mr;
}
}
if (m->MemberName == "AngleTraveled")
{
int32_t value=RobotRaconteur::RRArrayToScalar<int32_t >(m->FindElement("value")->CastData<RobotRaconteur::RRArray<int32_t > >());
if (async_obj)
{
RR_WEAK_PTR<experimental::create::Create_skel> wp=RobotRaconteur::rr_cast<experimental::create::Create_skel>(shared_from_this());
async_obj->async_set_AngleTraveled(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_AngleTraveled(value);
return mr;
}
}
if (m->MemberName == "Bumpers")
{
uint8_t value=RobotRaconteur::RRArrayToScalar<uint8_t >(m->FindElement("value")->CastData<RobotRaconteur::RRArray<uint8_t > >());
if (async_obj)
{
RR_WEAK_PTR<experimental::create::Create_skel> wp=RobotRaconteur::rr_cast<experimental::create::Create_skel>(shared_from_this());
async_obj->async_set_Bumpers(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_Bumpers(value);
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Create_skel::rr_get_DistanceTraveled(RR_WEAK_PTR<experimental::create::Create_skel> skel,int32_t value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<experimental::create::Create_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value)));
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Create_skel::rr_get_AngleTraveled(RR_WEAK_PTR<experimental::create::Create_skel> skel,int32_t value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<experimental::create::Create_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value)));
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Create_skel::rr_get_Bumpers(RR_WEAK_PTR<experimental::create::Create_skel> skel,uint8_t value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<experimental::create::Create_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(value)));
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> Create_skel::CallFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallRes,rr_m->MemberName);
RR_SHARED_PTR<experimental::create::async_Create > async_obj=get_asyncobj();
if (rr_m->MemberName == "Drive")
{
int16_t velocity =RobotRaconteur::RRArrayToScalar<int16_t >(rr_m->FindElement("velocity")->CastData<RobotRaconteur::RRArray<int16_t > >());
int16_t radius =RobotRaconteur::RRArrayToScalar<int16_t >(rr_m->FindElement("radius")->CastData<RobotRaconteur::RRArray<int16_t > >());
if (async_obj)
{
RR_WEAK_PTR<experimental::create::Create_skel> rr_wp=RobotRaconteur::rr_cast<experimental::create::Create_skel>(shared_from_this());
async_obj->async_Drive(velocity, radius, boost::bind(&experimental::create::Create_skel::rr_Drive,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->Drive(velocity, radius);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "StartStreaming")
{
if (async_obj)
{
RR_WEAK_PTR<experimental::create::Create_skel> rr_wp=RobotRaconteur::rr_cast<experimental::create::Create_skel>(shared_from_this());
async_obj->async_StartStreaming(boost::bind(&experimental::create::Create_skel::rr_StartStreaming,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->StartStreaming();
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "StopStreaming")
{
if (async_obj)
{
RR_WEAK_PTR<experimental::create::Create_skel> rr_wp=RobotRaconteur::rr_cast<experimental::create::Create_skel>(shared_from_this());
async_obj->async_StopStreaming(boost::bind(&experimental::create::Create_skel::rr_StopStreaming,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->StopStreaming();
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Create_skel::rr_Drive(RR_WEAK_PTR<experimental::create::Create_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Create_skel::rr_StartStreaming(RR_WEAK_PTR<experimental::create::Create_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Create_skel::rr_StopStreaming(RR_WEAK_PTR<experimental::create::Create_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Create_skel::rr_Bump_Handler()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mm=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_EventReq,"Bump");
SendEvent(rr_mm);
}
void Create_skel::RegisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RR_SHARED_PTR<experimental::create::Create > obj=RobotRaconteur::rr_cast<experimental::create::Create >(rrobj1);
Bump_rrconnection=obj->get_Bump().connect(boost::bind(&Create_skel::rr_Bump_Handler, RobotRaconteur::rr_cast<Create_skel>(shared_from_this())));
RobotRaconteur::ServiceSkel::RegisterEvents(rrobj1);
}

void Create_skel::UnregisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
Bump_rrconnection.disconnect();
RobotRaconteur::ServiceSkel::UnregisterEvents(rrobj1);
}

RR_SHARED_PTR<RobotRaconteur::RRObject> Create_skel::GetSubObj(const std::string &name, const std::string &ind)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Create_skel::InitPipeServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitPipeServersRun) return;
rr_InitPipeServersRun=true;
RR_SHARED_PTR<experimental::create::Create > obj=RobotRaconteur::rr_cast<experimental::create::Create >(rrobj1);
}

void Create_skel::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> Create_skel::CallPipeFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Create_skel::InitWireServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitWireServersRun) return;
rr_InitWireServersRun=true;
RR_SHARED_PTR<experimental::create::Create > obj=RobotRaconteur::rr_cast<experimental::create::Create >(rrobj1);
rr_packets_wire=RR_MAKE_SHARED<RobotRaconteur::WireServer<RR_SHARED_PTR<SensorPacket > > >("packets",shared_from_this());
obj->set_packets(rr_packets_wire);
}

void Create_skel::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
if (m->MemberName=="packets")
{
rr_packets_wire->WirePacketReceived(m,e);
return;
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> Create_skel::CallWireFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
if (m->MemberName=="packets")
{
return rr_packets_wire->WireCommand(m,e);
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Create_skel::InitCallbackServers(RR_SHARED_PTR<RobotRaconteur::RRObject> o)
{
RR_SHARED_PTR<experimental::create::Create > obj=RobotRaconteur::rr_cast<experimental::create::Create >(o);
obj->set_play_callback(RR_MAKE_SHARED<RobotRaconteur::CallbackServer<boost::function<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >(int32_t, int32_t) > > >("play_callback",shared_from_this()));
}
RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > Create_skel::rr_play_callback_callback(uint32_t rrendpoint, int32_t DistanceTraveled, int32_t AngleTraveled){
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_CallbackCallReq,"play_callback");
rr_req->ServicePath=GetServicePath();
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("DistanceTraveled",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(DistanceTraveled))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("AngleTraveled",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(AngleTraveled))));
RR_SHARED_PTR<RobotRaconteur::ServerContext> rr_s=GetContext();
if (rr_s==0) throw std::runtime_error("Service has been closed");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=rr_s->ProcessCallbackTransaction(rr_req,rrendpoint);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return rr_me->CastData<RobotRaconteur::RRArray<uint8_t > >();
}

RR_SHARED_PTR<void> Create_skel::GetCallbackFunction(uint32_t endpoint, const std::string& membername)
{
if (membername=="play_callback")
{
return RR_MAKE_SHARED<boost::function<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >(int32_t, int32_t) > >(boost::bind(&Create_skel::rr_play_callback_callback, RobotRaconteur::rr_cast<Create_skel>(shared_from_this()), endpoint, _1, _2));
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> Create_skel::CallMemoryFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::Endpoint> e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
}
}

