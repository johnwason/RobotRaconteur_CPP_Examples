//This file is automatically generated. DO NOT EDIT!

#ifndef ROBOTRACONTEUR_USE_STDAFX
#include "experimental__createwebcam_stubskel.h"
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
#else
#include "stdafx.h"
#endif
namespace experimental
{
namespace createwebcam
{
std::string experimental__createwebcamFactory::GetServiceName()
{
return "experimental.createwebcam";
}
std::string experimental__createwebcamFactory::DefString()
{
std::string out(
"#Service to provide sample interface to webcams\n"
"service experimental.createwebcam\n"
"\n"
"option version 0.5\n"
"\n"
"struct WebcamImage\n"
"field int32 width\n"
"field int32 height\n"
"field int32 step\n"
"field uint8[] data\n"
"end struct\n"
"\n"
"struct WebcamImage_size\n"
"field int32 width\n"
"field int32 height\n"
"field int32 step\n"
"end struct\n"
"\n"
"object Webcam\n"
"property string Name\n"
"function WebcamImage CaptureFrame()\n"
"\n"
"function void StartStreaming()\n"
"function void StopStreaming()\n"
"pipe WebcamImage FrameStream\n"
"\n"
"function WebcamImage_size CaptureFrameToBuffer()\n"
"memory uint8[] buffer\n"
"memory uint8[*] multidimbuffer\n"
"\n"
"end object\n"
"\n"
"object WebcamHost\n"
"property string{int32} WebcamNames\n"
"objref Webcam{int32} Webcams\n"
"end object\n"
);
return out;
}
RR_SHARED_PTR<RobotRaconteur::StructureStub> experimental__createwebcamFactory::FindStructureStub(std::string s)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(s);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (objecttype=="WebcamImage") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<WebcamImage_stub>(GetNode()));
if (objecttype=="WebcamImage_size") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<WebcamImage_size_stub>(GetNode()));
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> experimental__createwebcamFactory::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRStructure> structin)
{
std::string type=structin->RRType();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "experimental.createwebcam") return GetNode()->PackStructure(structin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->PackStructure(structin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::RRObject> experimental__createwebcamFactory::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> mstructin)
{
std::string type=mstructin->GetTypeString();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "experimental.createwebcam") return GetNode()->UnpackStructure(mstructin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->UnpackStructure(mstructin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceStub> experimental__createwebcamFactory::CreateStub(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::ClientContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "experimental.createwebcam") return GetNode()->GetServiceType(servicetype)->CreateStub(type,path,context);
if (objecttype=="Webcam") { RR_SHARED_PTR<Webcam_stub> o=(RR_MAKE_SHARED<Webcam_stub>(path,context)); o->RRInitStub(); return o; }
if (objecttype=="WebcamHost") { RR_SHARED_PTR<WebcamHost_stub> o=(RR_MAKE_SHARED<WebcamHost_stub>(path,context)); o->RRInitStub(); return o; }
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceSkel> experimental__createwebcamFactory::CreateSkel(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::RRObject> obj, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "experimental.createwebcam") return GetNode()->GetServiceType(servicetype)->CreateSkel(type,path,obj,context);
if (objecttype=="Webcam") {RR_SHARED_PTR<Webcam_skel> o=RR_MAKE_SHARED<Webcam_skel>(); o->Init(path,obj,context); return o; }
if (objecttype=="WebcamHost") {RR_SHARED_PTR<WebcamHost_skel> o=RR_MAKE_SHARED<WebcamHost_skel>(); o->Init(path,obj,context); return o; }
throw RobotRaconteur::ServiceException("Invalid structure skel type.");
return RR_SHARED_PTR<RobotRaconteur::ServiceSkel>();
}
void experimental__createwebcamFactory::DownCastAndThrowException(RobotRaconteur::RobotRaconteurException& rr_exp)
{
std::string rr_type=rr_exp.Error;
if (rr_type.find('.')==std::string::npos)
{
	return;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "experimental.createwebcam") GetNode()->DownCastAndThrowException(rr_exp);
return;
}
RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> experimental__createwebcamFactory::DownCastException(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> rr_exp){
if (!rr_exp) return rr_exp;
std::string rr_type=rr_exp->Error;
if (rr_type.find('.')==std::string::npos)
{
	return rr_exp;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "experimental.createwebcam") return GetNode()->DownCastException(rr_exp);
return rr_exp;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> WebcamImage_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<WebcamImage > s2=RobotRaconteur::rr_cast<WebcamImage >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("width",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->width))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("height",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->height))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("step",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->step))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("data",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->data)));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("experimental.createwebcam.WebcamImage",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> WebcamImage_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<WebcamImage > ret=RR_MAKE_SHARED<WebcamImage >();
ret->width=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"width")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->height=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"height")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->step=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"step")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->data=RobotRaconteur::MessageElement::FindElement(m->Elements,"data")->CastData<RobotRaconteur::RRArray<uint8_t > >();
return ret;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> WebcamImage_size_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<WebcamImage_size > s2=RobotRaconteur::rr_cast<WebcamImage_size >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("width",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->width))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("height",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->height))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("step",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->step))));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("experimental.createwebcam.WebcamImage_size",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> WebcamImage_size_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<WebcamImage_size > ret=RR_MAKE_SHARED<WebcamImage_size >();
ret->width=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"width")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->height=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"height")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->step=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"step")->CastData<RobotRaconteur::RRArray<int32_t > >());
return ret;
}

Webcam_stub::Webcam_stub(const std::string &path, RR_SHARED_PTR<RobotRaconteur::ClientContext> c) : RobotRaconteur::ServiceStub(path,c){ }
void Webcam_stub::RRInitStub()
{
rrvar_FrameStream=RR_MAKE_SHARED<RobotRaconteur::PipeClient<RR_SHARED_PTR<WebcamImage > > >("FrameStream",shared_from_this()) ;
rrvar_buffer=RR_MAKE_SHARED<RobotRaconteur::ArrayMemoryClient<uint8_t > >("buffer",shared_from_this());
rrvar_multidimbuffer=RR_MAKE_SHARED<RobotRaconteur::MultiDimArrayMemoryClient<uint8_t > >("multidimbuffer",shared_from_this());
}

std::string Webcam_stub::get_Name()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"Name");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::RRArrayToString(me->CastData<RobotRaconteur::RRArray<char> >());
}
void Webcam_stub::set_Name(std::string value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"Name");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(value))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(req);
}

RR_SHARED_PTR<WebcamImage > Webcam_stub::CaptureFrame()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"CaptureFrame");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<WebcamImage >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

void Webcam_stub::StartStreaming()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"StartStreaming");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void Webcam_stub::StopStreaming()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"StopStreaming");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

RR_SHARED_PTR<WebcamImage_size > Webcam_stub::CaptureFrameToBuffer()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"CaptureFrameToBuffer");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<WebcamImage_size >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

RR_SHARED_PTR<RobotRaconteur::Pipe<RR_SHARED_PTR<WebcamImage > > > Webcam_stub::get_FrameStream()
{
RR_SHARED_PTR<RobotRaconteur::PipeClient<RR_SHARED_PTR<WebcamImage > > > value=rrvar_FrameStream;
if (!value) throw std::runtime_error("Stub has been closed");
return value;
}
void Webcam_stub::set_FrameStream(RR_SHARED_PTR<RobotRaconteur::Pipe<RR_SHARED_PTR<WebcamImage > > > value)
{
throw std::runtime_error("Not valid for client");
}

RR_SHARED_PTR<RobotRaconteur::ArrayMemory<uint8_t > > Webcam_stub::get_buffer()
{
RR_SHARED_PTR<RobotRaconteur::ArrayMemoryClient<uint8_t > > value=rrvar_buffer;
if (!value) throw std::runtime_error("Stub has been closed");
return value;
}
RR_SHARED_PTR<RobotRaconteur::MultiDimArrayMemory<uint8_t > > Webcam_stub::get_multidimbuffer()
{
RR_SHARED_PTR<RobotRaconteur::MultiDimArrayMemoryClient<uint8_t > > value=rrvar_multidimbuffer;
if (!value) throw std::runtime_error("Stub has been closed");
return value;
}
void Webcam_stub::DispatchEvent(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void Webcam_stub::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
if (m->MemberName=="FrameStream")
{
rrvar_FrameStream->PipePacketReceived(m);
return;
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void Webcam_stub::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry>Webcam_stub::CallbackCall(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
std::string ename=rr_m->MemberName;
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_CallbackCallRet, ename);
rr_mr->ServicePath=rr_m->ServicePath;
rr_mr->TransactionID=rr_m->TransactionID;
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

std::string Webcam_stub::RRType()
{
return "experimental.createwebcam.Webcam";
}
void Webcam_stub::RRClose()
{
rrvar_FrameStream->Shutdown();
if (rrvar_buffer)
{
rrvar_buffer->Shutdown();
}
if (rrvar_multidimbuffer)
{
rrvar_multidimbuffer->Shutdown();
}
ServiceStub::RRClose();
}

void Webcam_stub::async_get_Name(boost::function<void (std::string,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"Name");
AsyncProcessTransaction(m,boost::bind(&Webcam_stub::rrend_get_Name, RobotRaconteur::rr_cast<Webcam_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Webcam_stub::rrend_get_Name(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (std::string ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler("",err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler("",RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
std::string rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::RRArrayToString(me->CastData<RobotRaconteur::RRArray<char> >());
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler("",RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler("",RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Webcam_stub::async_set_Name(std::string value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"Name");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(value))));
AsyncProcessTransaction(req,boost::bind(&Webcam_stub::rrend_set_Name, RobotRaconteur::rr_cast<Webcam_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Webcam_stub::rrend_set_Name(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Webcam_stub::async_CaptureFrame(boost::function<void (RR_SHARED_PTR<WebcamImage >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"CaptureFrame");
AsyncProcessTransaction(rr_req,boost::bind(&Webcam_stub::rrend_CaptureFrame, RobotRaconteur::rr_cast<Webcam_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Webcam_stub::rrend_CaptureFrame(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<WebcamImage > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<WebcamImage >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<WebcamImage >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<WebcamImage > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<WebcamImage >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<WebcamImage >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<WebcamImage >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Webcam_stub::async_StartStreaming(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"StartStreaming");
AsyncProcessTransaction(rr_req,boost::bind(&Webcam_stub::rrend_StartStreaming, RobotRaconteur::rr_cast<Webcam_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Webcam_stub::rrend_StartStreaming(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Webcam_stub::async_StopStreaming(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"StopStreaming");
AsyncProcessTransaction(rr_req,boost::bind(&Webcam_stub::rrend_StopStreaming, RobotRaconteur::rr_cast<Webcam_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Webcam_stub::rrend_StopStreaming(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Webcam_stub::async_CaptureFrameToBuffer(boost::function<void (RR_SHARED_PTR<WebcamImage_size >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"CaptureFrameToBuffer");
AsyncProcessTransaction(rr_req,boost::bind(&Webcam_stub::rrend_CaptureFrameToBuffer, RobotRaconteur::rr_cast<Webcam_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Webcam_stub::rrend_CaptureFrameToBuffer(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<WebcamImage_size > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<WebcamImage_size >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<WebcamImage_size >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<WebcamImage_size > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<WebcamImage_size >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<WebcamImage_size >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<WebcamImage_size >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
WebcamHost_stub::WebcamHost_stub(const std::string &path, RR_SHARED_PTR<RobotRaconteur::ClientContext> c) : RobotRaconteur::ServiceStub(path,c){ }
void WebcamHost_stub::RRInitStub()
{
}

RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > > WebcamHost_stub::get_WebcamNames()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"WebcamNames");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::rr_cast<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > >((RRGetNode()->UnpackMapType<int32_t,RobotRaconteur::RRArray<char>  >(me->CastData<RobotRaconteur::MessageElementMap<int32_t> >())));
}
void WebcamHost_stub::set_WebcamNames(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"WebcamNames");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackMapType<int32_t,RobotRaconteur::RRArray<char>  >(value))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(req);
}

RR_SHARED_PTR<Webcam > WebcamHost_stub::get_Webcams(int32_t ind)
{
return RobotRaconteur::rr_cast<Webcam >(FindObjRefTyped("Webcams", boost::lexical_cast<std::string>(ind),"experimental.createwebcam.Webcam"));
}

void WebcamHost_stub::DispatchEvent(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void WebcamHost_stub::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void WebcamHost_stub::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry>WebcamHost_stub::CallbackCall(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
std::string ename=rr_m->MemberName;
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_CallbackCallRet, ename);
rr_mr->ServicePath=rr_m->ServicePath;
rr_mr->TransactionID=rr_m->TransactionID;
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

std::string WebcamHost_stub::RRType()
{
return "experimental.createwebcam.WebcamHost";
}
void WebcamHost_stub::RRClose()
{
ServiceStub::RRClose();
}

void WebcamHost_stub::async_get_WebcamNames(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"WebcamNames");
AsyncProcessTransaction(m,boost::bind(&WebcamHost_stub::rrend_get_WebcamNames, RobotRaconteur::rr_cast<WebcamHost_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void WebcamHost_stub::rrend_get_WebcamNames(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::rr_cast<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > >((RRGetNode()->UnpackMapType<int32_t,RobotRaconteur::RRArray<char>  >(me->CastData<RobotRaconteur::MessageElementMap<int32_t> >())));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void WebcamHost_stub::async_set_WebcamNames(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"WebcamNames");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackMapType<int32_t,RobotRaconteur::RRArray<char>  >(value))));
AsyncProcessTransaction(req,boost::bind(&WebcamHost_stub::rrend_set_WebcamNames, RobotRaconteur::rr_cast<WebcamHost_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void WebcamHost_stub::rrend_set_WebcamNames(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void WebcamHost_stub::async_get_Webcams(int32_t ind, boost::function<void(RR_SHARED_PTR<Webcam>,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>)> handler, int32_t timeout)
{
AsyncFindObjRefTyped("Webcams", boost::lexical_cast<std::string>(ind),"experimental.createwebcam.Webcam", boost::bind(&RobotRaconteur::ServiceStub::EndAsyncFindObjRef<Webcam >,_1,_2,handler) ,timeout);
}


void Webcam_skel::Init(const std::string& path, RR_SHARED_PTR<RobotRaconteur::RRObject> object, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
uncastobj=object;
rr_InitPipeServersRun=false;
rr_InitWireServersRun=false;
rr_buffer_mem.reset();
rr_multidimbuffer_mem.reset();
ServiceSkel::Init(path,object,context);
}
RR_SHARED_PTR<experimental::createwebcam::Webcam > Webcam_skel::get_obj()
{
return RobotRaconteur::rr_cast<experimental::createwebcam::Webcam >(uncastobj);
}
RR_SHARED_PTR<experimental::createwebcam::async_Webcam > Webcam_skel::get_asyncobj()
{
return RR_DYNAMIC_POINTER_CAST<experimental::createwebcam::async_Webcam >(uncastobj);
}
void Webcam_skel::ReleaseCastObject() 
{
rr_FrameStream_pipe->Shutdown();
}
std::string Webcam_skel::GetObjectType()
{
return "experimental.createwebcam.Webcam";
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> Webcam_skel::CallGetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetRes,m->MemberName);
RR_SHARED_PTR<experimental::createwebcam::async_Webcam > async_obj=get_asyncobj();
if (m->MemberName == "Name")
{
if (async_obj)
{
RR_WEAK_PTR<experimental::createwebcam::Webcam_skel> wp=RobotRaconteur::rr_cast<experimental::createwebcam::Webcam_skel>(shared_from_this());
async_obj->async_get_Name(boost::bind(&experimental::createwebcam::Webcam_skel::rr_get_Name,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
std::string value=get_obj()->get_Name();
mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(value))));
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> Webcam_skel::CallSetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetRes,m->MemberName);
RR_SHARED_PTR<experimental::createwebcam::async_Webcam > async_obj=get_asyncobj();
if (m->MemberName == "Name")
{
std::string value=RobotRaconteur::RRArrayToString(m->FindElement("value")->CastData<RobotRaconteur::RRArray<char> >());
if (async_obj)
{
RR_WEAK_PTR<experimental::createwebcam::Webcam_skel> wp=RobotRaconteur::rr_cast<experimental::createwebcam::Webcam_skel>(shared_from_this());
async_obj->async_set_Name(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_Name(value);
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Webcam_skel::rr_get_Name(RR_WEAK_PTR<experimental::createwebcam::Webcam_skel> skel,std::string value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<experimental::createwebcam::Webcam_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(value)));
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> Webcam_skel::CallFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallRes,rr_m->MemberName);
RR_SHARED_PTR<experimental::createwebcam::async_Webcam > async_obj=get_asyncobj();
if (rr_m->MemberName == "CaptureFrame")
{
if (async_obj)
{
RR_WEAK_PTR<experimental::createwebcam::Webcam_skel> rr_wp=RobotRaconteur::rr_cast<experimental::createwebcam::Webcam_skel>(shared_from_this());
async_obj->async_CaptureFrame(boost::bind(&experimental::createwebcam::Webcam_skel::rr_CaptureFrame, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<WebcamImage > rr_return=get_obj()->CaptureFrame();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "StartStreaming")
{
if (async_obj)
{
RR_WEAK_PTR<experimental::createwebcam::Webcam_skel> rr_wp=RobotRaconteur::rr_cast<experimental::createwebcam::Webcam_skel>(shared_from_this());
async_obj->async_StartStreaming(boost::bind(&experimental::createwebcam::Webcam_skel::rr_StartStreaming,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->StartStreaming();
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "StopStreaming")
{
if (async_obj)
{
RR_WEAK_PTR<experimental::createwebcam::Webcam_skel> rr_wp=RobotRaconteur::rr_cast<experimental::createwebcam::Webcam_skel>(shared_from_this());
async_obj->async_StopStreaming(boost::bind(&experimental::createwebcam::Webcam_skel::rr_StopStreaming,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->StopStreaming();
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "CaptureFrameToBuffer")
{
if (async_obj)
{
RR_WEAK_PTR<experimental::createwebcam::Webcam_skel> rr_wp=RobotRaconteur::rr_cast<experimental::createwebcam::Webcam_skel>(shared_from_this());
async_obj->async_CaptureFrameToBuffer(boost::bind(&experimental::createwebcam::Webcam_skel::rr_CaptureFrameToBuffer, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<WebcamImage_size > rr_return=get_obj()->CaptureFrameToBuffer();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Webcam_skel::rr_CaptureFrame(RR_WEAK_PTR<experimental::createwebcam::Webcam_skel> skel, RR_SHARED_PTR<WebcamImage > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<experimental::createwebcam::Webcam_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Webcam_skel::rr_StartStreaming(RR_WEAK_PTR<experimental::createwebcam::Webcam_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Webcam_skel::rr_StopStreaming(RR_WEAK_PTR<experimental::createwebcam::Webcam_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Webcam_skel::rr_CaptureFrameToBuffer(RR_WEAK_PTR<experimental::createwebcam::Webcam_skel> skel, RR_SHARED_PTR<WebcamImage_size > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<experimental::createwebcam::Webcam_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Webcam_skel::RegisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RR_SHARED_PTR<experimental::createwebcam::Webcam > obj=RobotRaconteur::rr_cast<experimental::createwebcam::Webcam >(rrobj1);
RobotRaconteur::ServiceSkel::RegisterEvents(rrobj1);
}

void Webcam_skel::UnregisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RobotRaconteur::ServiceSkel::UnregisterEvents(rrobj1);
}

RR_SHARED_PTR<RobotRaconteur::RRObject> Webcam_skel::GetSubObj(const std::string &name, const std::string &ind)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Webcam_skel::InitPipeServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitPipeServersRun) return;
rr_InitPipeServersRun=true;
RR_SHARED_PTR<experimental::createwebcam::Webcam > obj=RobotRaconteur::rr_cast<experimental::createwebcam::Webcam >(rrobj1);
rr_FrameStream_pipe=RR_MAKE_SHARED<RobotRaconteur::PipeServer<RR_SHARED_PTR<WebcamImage > > >("FrameStream",shared_from_this());
obj->set_FrameStream(rr_FrameStream_pipe);
}

void Webcam_skel::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
if (m->MemberName=="FrameStream")
{
rr_FrameStream_pipe->PipePacketReceived(m,e);
return;
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> Webcam_skel::CallPipeFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
if (m->MemberName=="FrameStream")
{
return rr_FrameStream_pipe->PipeCommand(m,e);
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Webcam_skel::InitWireServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitWireServersRun) return;
rr_InitWireServersRun=true;
RR_SHARED_PTR<experimental::createwebcam::Webcam > obj=RobotRaconteur::rr_cast<experimental::createwebcam::Webcam >(rrobj1);
}

void Webcam_skel::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> Webcam_skel::CallWireFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Webcam_skel::InitCallbackServers(RR_SHARED_PTR<RobotRaconteur::RRObject> o)
{
RR_SHARED_PTR<experimental::createwebcam::Webcam > obj=RobotRaconteur::rr_cast<experimental::createwebcam::Webcam >(o);
}
RR_SHARED_PTR<void> Webcam_skel::GetCallbackFunction(uint32_t endpoint, const std::string& membername)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> Webcam_skel::CallMemoryFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::Endpoint> e)
{
if (m->MemberName=="buffer")
{
if (rr_buffer_mem==0) rr_buffer_mem=RR_MAKE_SHARED<RobotRaconteur::ArrayMemoryServiceSkel<uint8_t > >("buffer",shared_from_this());
return rr_buffer_mem->CallMemoryFunction(m,e,get_obj()->get_buffer());
}
if (m->MemberName=="multidimbuffer")
{
if (rr_multidimbuffer_mem==0) rr_multidimbuffer_mem=RR_MAKE_SHARED<RobotRaconteur::MultiDimArrayMemoryServiceSkel<uint8_t > >("multidimbuffer",shared_from_this());
return rr_multidimbuffer_mem->CallMemoryFunction(m,e,get_obj()->get_multidimbuffer());
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void WebcamHost_skel::Init(const std::string& path, RR_SHARED_PTR<RobotRaconteur::RRObject> object, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
uncastobj=object;
rr_InitPipeServersRun=false;
rr_InitWireServersRun=false;
ServiceSkel::Init(path,object,context);
}
RR_SHARED_PTR<experimental::createwebcam::WebcamHost > WebcamHost_skel::get_obj()
{
return RobotRaconteur::rr_cast<experimental::createwebcam::WebcamHost >(uncastobj);
}
RR_SHARED_PTR<experimental::createwebcam::async_WebcamHost > WebcamHost_skel::get_asyncobj()
{
return RR_DYNAMIC_POINTER_CAST<experimental::createwebcam::async_WebcamHost >(uncastobj);
}
void WebcamHost_skel::ReleaseCastObject() 
{
}
std::string WebcamHost_skel::GetObjectType()
{
return "experimental.createwebcam.WebcamHost";
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> WebcamHost_skel::CallGetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetRes,m->MemberName);
RR_SHARED_PTR<experimental::createwebcam::async_WebcamHost > async_obj=get_asyncobj();
if (m->MemberName == "WebcamNames")
{
if (async_obj)
{
RR_WEAK_PTR<experimental::createwebcam::WebcamHost_skel> wp=RobotRaconteur::rr_cast<experimental::createwebcam::WebcamHost_skel>(shared_from_this());
async_obj->async_get_WebcamNames(boost::bind(&experimental::createwebcam::WebcamHost_skel::rr_get_WebcamNames,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > > value=get_obj()->get_WebcamNames();
mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackMapType<int32_t,RobotRaconteur::RRArray<char>  >(value))));
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> WebcamHost_skel::CallSetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetRes,m->MemberName);
RR_SHARED_PTR<experimental::createwebcam::async_WebcamHost > async_obj=get_asyncobj();
if (m->MemberName == "WebcamNames")
{
RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > > value=RobotRaconteur::rr_cast<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > >((RRGetNode()->UnpackMapType<int32_t,RobotRaconteur::RRArray<char>  >(m->FindElement("value")->CastData<RobotRaconteur::MessageElementMap<int32_t> >())));
if (async_obj)
{
RR_WEAK_PTR<experimental::createwebcam::WebcamHost_skel> wp=RobotRaconteur::rr_cast<experimental::createwebcam::WebcamHost_skel>(shared_from_this());
async_obj->async_set_WebcamNames(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_WebcamNames(value);
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void WebcamHost_skel::rr_get_WebcamNames(RR_WEAK_PTR<experimental::createwebcam::WebcamHost_skel> skel,RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<experimental::createwebcam::WebcamHost_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackMapType<int32_t,RobotRaconteur::RRArray<char>  >(value)));
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> WebcamHost_skel::CallFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallRes,rr_m->MemberName);
RR_SHARED_PTR<experimental::createwebcam::async_WebcamHost > async_obj=get_asyncobj();
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void WebcamHost_skel::RegisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RR_SHARED_PTR<experimental::createwebcam::WebcamHost > obj=RobotRaconteur::rr_cast<experimental::createwebcam::WebcamHost >(rrobj1);
RobotRaconteur::ServiceSkel::RegisterEvents(rrobj1);
}

void WebcamHost_skel::UnregisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RobotRaconteur::ServiceSkel::UnregisterEvents(rrobj1);
}

RR_SHARED_PTR<RobotRaconteur::RRObject> WebcamHost_skel::GetSubObj(const std::string &name, const std::string &ind)
{
if (name=="Webcams")
{
return RobotRaconteur::rr_cast<RobotRaconteur::RRObject>(get_obj()->get_Webcams(boost::lexical_cast<int32_t>(ind)));
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void WebcamHost_skel::InitPipeServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitPipeServersRun) return;
rr_InitPipeServersRun=true;
RR_SHARED_PTR<experimental::createwebcam::WebcamHost > obj=RobotRaconteur::rr_cast<experimental::createwebcam::WebcamHost >(rrobj1);
}

void WebcamHost_skel::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> WebcamHost_skel::CallPipeFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void WebcamHost_skel::InitWireServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitWireServersRun) return;
rr_InitWireServersRun=true;
RR_SHARED_PTR<experimental::createwebcam::WebcamHost > obj=RobotRaconteur::rr_cast<experimental::createwebcam::WebcamHost >(rrobj1);
}

void WebcamHost_skel::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> WebcamHost_skel::CallWireFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void WebcamHost_skel::InitCallbackServers(RR_SHARED_PTR<RobotRaconteur::RRObject> o)
{
RR_SHARED_PTR<experimental::createwebcam::WebcamHost > obj=RobotRaconteur::rr_cast<experimental::createwebcam::WebcamHost >(o);
}
RR_SHARED_PTR<void> WebcamHost_skel::GetCallbackFunction(uint32_t endpoint, const std::string& membername)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> WebcamHost_skel::CallMemoryFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::Endpoint> e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
}
}

